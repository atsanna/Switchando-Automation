<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>#HomeAutomation</title>
    <link href="resources/foundation.min.css" type="text/css" rel="stylesheet">
    <link href="resources/material.min.css" type="text/css" rel="stylesheet" />
    <script src="resources/material.min.js" type="text/javascript"></script>
</head>

<body style="background-color:whitesmoke">
    <div id="" class="text-center">
        <div class="small-12 columns"><br />
            <input class="mdl-slider mdl-js-slider slider" type="range" min="0" max="255" step="1" style="width:100%;height:50px;color:white" id="wcolor"><br />
        </div>
        <button id="sendrequestbtn" class="button" style="width:100%" onclick="myFunction()">Set</button>
    </div>
    <style>
        button,
        .button,
        a.button,
        input.button {
            border-radius: 0;
        }
    </style>
    <script>
        document.getElementById("wcolor").value = get('W');
        function myFunction() {
    var w = document.getElementById("wcolor").value;
    var ip = get('ip');
    var xhttp = new XMLHttpRequest();
    xhttp.open("GET", get('protocol') + '://' + get('ip') + "/api/?interface=auto&objname=" + get('id') + "&W=" + w + "&dimmer=1000" + "&password=" + get('password'), false);
    xhttp.send();
}
        function get(name){
   if(name=(new RegExp('[?&]'+encodeURIComponent(name)+'=([^&]*)')).exec(location.search))
      return decodeURIComponent(name[1]);
}
function hexToRgb(hex) {
    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function(m, r, g, b) {
        return r + r + g + g + b + b;
    });
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
}

    </script>
</body>
</html>
